import{_ as a,o as e,c as t,V as l}from"./chunks/framework.6038b03e.js";const i="/vitepress/assets/微信截图_20240711213057.be037f00.png",s="/vitepress/assets/微信截图_20240711215044.0c40f9aa.png",p="/vitepress/assets/微信截图_20240711215140.adf27fd6.png",r="/vitepress/assets/kjshkdjshfkjsdhfkjsd.35567faa.png",k=JSON.parse('{"title":"React 全家桶","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/react.md","lastUpdated":null}'),c={name:"frontEnd/react.md"},o=l('<h1 id="react-全家桶" tabindex="-1">React 全家桶 <a class="header-anchor" href="#react-全家桶" aria-label="Permalink to &quot;React 全家桶&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>用于构建用户界面的 JavaScript 库</p><p>React 是一个将数据渲染为 HTML 视图的开源 JavaScript 库。</p><h3 id="_1-谁开发的" tabindex="-1">(1)谁开发的？ <a class="header-anchor" href="#_1-谁开发的" aria-label="Permalink to &quot;(1)谁开发的？&quot;">​</a></h3><p><img src="'+i+'" alt=""></p><h3 id="_2-为什么要学" tabindex="-1">(2)为什么要学？ <a class="header-anchor" href="#_2-为什么要学" aria-label="Permalink to &quot;(2)为什么要学？&quot;">​</a></h3><p><img src="'+s+'" alt=""></p><h3 id="_3-react-的特点" tabindex="-1">(3)React 的特点 <a class="header-anchor" href="#_3-react-的特点" aria-label="Permalink to &quot;(3)React 的特点&quot;">​</a></h3><p><img src="'+p+'" alt=""></p><h2 id="react-jsx" tabindex="-1">React JSX <a class="header-anchor" href="#react-jsx" aria-label="Permalink to &quot;React JSX&quot;">​</a></h2><p>全称: JavaScript XML jsx 语法规则：</p><ol><li><p>定义虚拟 DOM 时,不要写引号</p></li><li><p>标签中混入 js 表达式时要用{}</p></li><li><p>样式的类名指定不要用 class，要用 className</p></li><li><p>内联样式，要用 style=【【key:value}}的形式去写。</p></li><li><p>只能有一个根标签。</p></li><li><p>标签必须闭合</p></li><li><p>标签首字母</p></li></ol><p>（1）若小写字母开头，则将标签转为 html 中同名元素，若 html 中无该标签对应的同名元素，则报错。</p><p>（2）若大写字母开头，react 就会渲染对应的组件，若组件没有定义，则报错。</p><h2 id="模块与组件、模块化与组件化的理解" tabindex="-1">模块与组件、模块化与组件化的理解 <a class="header-anchor" href="#模块与组件、模块化与组件化的理解" aria-label="Permalink to &quot;模块与组件、模块化与组件化的理解&quot;">​</a></h2><ul><li><p>模块</p><ol><li><p>理解：向外提供特定功能的 js 程序, 一般就是一个 js 文件</p></li><li><p>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</p></li><li><p>作用：复用 js, 简化 js 的编写, 提高 js 运行效率</p></li></ol></li><li><p>组件</p><ol><li><p>理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image 等等)</p></li><li><p>为什么要用组件： 一个界面的功能更复杂</p></li><li><p>作用：复用编码, 简化项目编码, 提高运行效率</p></li></ol></li><li><p>模块化</p><p>当应用的 js 都以模块来编写的, 这个应用就是一个模块化的应用</p></li><li><p>组件化</p><p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p><p><img src="'+r+'" alt=""></p></li></ul>',17),n=[o];function h(_,d,m,f,u,b){return e(),t("div",null,n)}const q=a(c,[["render",h]]);export{k as __pageData,q as default};
