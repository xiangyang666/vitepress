import{_ as l,o as a,c as e,V as i}from"./chunks/framework.6038b03e.js";const f=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/javaBase/数组.md","lastUpdated":1688302157000}'),o={name:"backEnd/javaBase/数组.md"},t=i('<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><h2 id="_1-数组的概述" tabindex="-1">1. 数组的概述 <a class="header-anchor" href="#_1-数组的概述" aria-label="Permalink to &quot;1. 数组的概述&quot;">​</a></h2><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p><p><strong>数组的特点：</strong></p><ul><li>数组本身是<code>引用数据类型</code>，而数组中的元素可以是<code>任何数据类型</code>，包括基本数据类型和引用数据类型。</li><li>创建数组对象会在内存中开辟一整块<code>连续的空间</code>。占据的空间的大小，取决于数组的长度和数组中元素的类型。</li><li>数组中的元素在内存中是依次紧密排列的，有序的。</li><li>数组，一旦初始化完成，其长度就是确定的。数组的<code>长度一旦确定，就不能修改</code>。</li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li><li>数组名中引用的是这块连续空间的首地址。</li></ul><p><strong>数组的分类：</strong></p><ul><li>一维数组：存储一组数据</li><li>二维数组：存储多组数据，相当于二维表，一行代表一组数据，只是这里的二维表每一行长度不要求一样。</li></ul><p><strong>数组元素的默认值</strong></p><ul><li>这里以数组的动态初始化方式为例说明</li></ul><ol><li>整型数组元素的默认初始值：0</li><li>浮点型数组元素的默认初始值：0.0</li><li>字符型数组元素的默认初始值：0（或理解为‘\\u0000’）</li><li>boolean型数组元素的默认初始化值：false</li><li>引用数据类型数组元素的默认初始化值：null</li></ol>',10),r=[t];function s(n,c,_,d,p,u){return a(),e("div",null,r)}const m=l(o,[["render",s]]);export{f as __pageData,m as default};
