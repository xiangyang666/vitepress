import{_ as s,o as a,c as l,V as n}from"./chunks/framework.6038b03e.js";const p="/vitepress/assets/static.58e0537c.png",o="/vitepress/assets/static2.ec3d628a.png",e="/vitepress/assets/main.914a7484.png",h=JSON.parse('{"title":"面向对象","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/javaBase/面向对象.md","lastUpdated":1697031114000}'),t={name:"backEnd/javaBase/面向对象.md"},c=n(`<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">格式化代码：Ctrl + Alt + L</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><ol><li><p>面向对象内容的三条主线：</p><ul><li>Java类及类的成员：（重点）属性、方法、构造器；（熟悉）代码块、内部类</li><li>面向对象的特征；封装、继承、多态、（抽象）</li><li>其他关键字的使用：this、super、package、import、static、final、interface、abstract等</li></ul></li><li><p>面向过程编程（POP：Process oriented programming） vs 面向对象编程（OOP：object-oriented programming）</p></li></ol><ul><li><p>2.1 简单的语言描述二者的区别</p></li><li><blockquote><p>面向过程：</p></blockquote><ul><li>以 “函数” 为组织单位</li><li>是一种 “执行者思维”， 适合解决简单问题。扩展能力差、后期维护难度较大。</li></ul></li><li><blockquote><p>面向对象：</p></blockquote><ul><li>以 “类” 为组织单位。每种实物都具备自己的 “属性” 和 “行为/功能”。</li><li>是一种 “设计者思维”， 适合解决复杂问题。代码扩展性强、可维护性高。</li></ul></li></ul><ul><li><p>2.2 二者关系</p><blockquote><p>我们千万不要把面向过程和面向对象对立起来。他们是相辅相成的。面向对象离不开面向过程！</p></blockquote></li></ul><ol start="3"><li><p>面向对象编程的两个核心概念：类（Class）、对象（Object）</p><blockquote><p>谈谈对这两个概念的理解？</p><p>类：具有相同特征的事物的抽象描述，是‘抽象的’、概念上的定义。</p><p>对象：实际存在的该类事物的&quot;每个个体&quot;，是 “具体的”， 因而也称为“实例（instance）”</p></blockquote></li><li><p>面向对象完成具体功能的操作的三步流程（非常重要）</p><ul><li>步骤1：创建类，并设计类的内部成员（属性、方法）</li><li>步骤2：创建类的对象。比如：Phone p1 = new Phone()</li><li>步骤3：通过对象，调用其内部声明的属性或方法，完成相关功能</li></ul></li></ol><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><ol><li><p>变量的分类：</p><ul><li>角度一：按照数据类型来分；基本数据类型（8种）、引用数据类型（数组、类、接口、枚举、注释、记录）</li><li>角度二：按照变量在类中声明的位置不同；成员变量（或属性）、局部变量（方法内、方法形参、构造器内、构造器形参、代码块内等）</li></ul></li><li><p>属性的几个称谓：成员变量、属性、field（字段、域）</p></li><li><p>区分成员变量 VS 局部变量</p><ul><li><p>3.1 相同点</p><ul><li>变量声明的格式相同：数据类型 变量 = 变量值</li><li>变量都有其有效的作用域。出了作用域，就失效了</li><li>变量必须先声明，后赋值，再使用</li></ul></li><li><p>3.2 不同点</p><ul><li><p>1.类中声明的位置不同：</p><p>属性：声明在类内，方法外的变量</p><p>局部变量：声明方法、构造器内部的变量</p></li><li><p>2.在内存中分配的位置不同（难）</p><p>属性：随着对象的创建，存储在堆空间中。</p><p>局部变量：存储在栈空间中</p></li><li><p>3.生命周期：</p><p>属性：随着对象的创建而创建，随着对象的消亡而消亡</p><p>局部变量：随着方法对应的栈帧入栈，局部变量会在栈中分配；随着方法对应的栈帧出栈，局部变量消亡</p></li><li><p>4.作用域：</p><p>属性：在整个类的内部都是有效的</p><p>局部变量：仅限于声明此局部变量所在的方法（或构造器、代码块）中</p></li><li><p>5.是否可以有权限修饰符进行修饰：</p><p>都有哪些权限修饰符：public、protected、缺省、private。（用于表明所修饰的结构可调用的范围大小）</p><p>属性：是可以使用权限修饰符进行修饰的。（PS：暂时还未讲封装性，所以大小先不用写任何修饰符）。</p><p>而局部变量：不能使用任何权限修饰符进行修饰的。</p></li><li><p>6.是否有默认值：（重点）</p><p>属性：都有默认初始化值</p><p>​ 意味着，如果没有给属性进行显示初始化赋值，则会有默认初始化值。</p><p>局部变量：都没有默认初始化值。</p><p>​ 意味着，在使用局部变量之前，必须要显式的赋值，否则报错。</p></li></ul></li></ul></li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Employee.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 声明EmployeeTest测试类，并在main方法中，创建2个员工对象，并为属性赋值，并打印两个员工的信息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Employee</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 属性</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// 编号</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 姓名</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 年龄</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> salary</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// 薪资</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// EmployeeTest.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EmployeeTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建类的实例（或创建类的对象，类的实例化）</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Employee</span><span style="color:#A6ACCD;"> emp1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Employee</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">emp1内存地址：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12999.00</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,name = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,age = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,salary = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 再创建一个Employee的第二个对象</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Employee emp2 = emp1;  // 错误写法</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Employee</span><span style="color:#A6ACCD;"> emp2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Employee</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1002</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">26</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8299.00</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,name = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,age = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,salary = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> emp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="方法-method" tabindex="-1">方法（method） <a class="header-anchor" href="#方法-method" aria-label="Permalink to &quot;方法（method）&quot;">​</a></h2><ol><li><p>使用方法的好处</p><p>方法的理解：“方法” 是类或对象行为特征的抽象，用来完成某个功能操作。</p><p>方法的好处：实现代码重用、减少冗余、简化代码</p></li><li><p>使用示例</p><ul><li>Math.random()的random()方法</li><li>Math.sqrt(x)的sqrt(x)方法</li><li>System.out.println(x)的println(x)方法</li><li>new Scanner(System.in).nextInt()的nextInt()方法</li><li>Arrays类中的binarySearch()方法、sort()方法、equals()方法</li></ul></li><li><p>声明举例</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">interests</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> hoboy</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getAge</span><span style="color:#89DDFF;">()</span></span></code></pre></div></li><li><p>方法声明的格式（重点）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">权限修饰符  [其它修饰符] 返回值类型 </span><span style="color:#82AAFF;">方法名</span><span style="color:#A6ACCD;">(形参列表) [throws 异常类型] </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span><span style="color:#676E95;font-style:italic;">// 方法头</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">​          </span><span style="color:#676E95;font-style:italic;">// 方法体</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">注意：[]中的内部不是必须的，以后再说</span></span></code></pre></div></li><li><p>具体的方法声明的细节</p><p>5.1 权限修饰符</p><p>​ ① Java规定了哪些权限修饰符呢？有四种：private \\ 缺省 \\ protected \\ public（放到封装讲）</p><p>​ 暂时大家声明方法时，可以先都写成public的。</p><p>5.2 返回值类型：描述当调用完此方法时，是否需要返回一个结果</p><p>​ 分类：</p><p>​ &gt; 无返回值类型：使用void表示即可。比如：System.out.println(x)的println(x)的方法、Arrays类中的binarySearch()方法、sort()方法、equals()方法</p><p>​ &gt; 有具体的返回值类型：需要指明返回的数据的类型。可以是基本数据类型，也可以引用数据类型</p><p>​ &gt; 需要在方法内部配合使用 “return + 返回值类型的变量或常亮”</p><p>​ 比如：Math.random()、new Scanner(System.in).nextInt()等</p><p>​ 【经验】我们在声明方法时，要不要提供返回值类型呢?</p><p>​ &gt; 根据方法具体实现的功能来决定。换句话说，具体问题具体分析</p><p>​ &gt; 根据题目要求</p><p>5.3 方法名：属于标识符。需要满足标识符的规定和规范。“见名知意”</p><p>5.4 形参列表：形参，属于局部变量，且可以声明多个。</p><p>​ 格式：（形参类型1 形参1，形参类型2 形参2，.......）</p><p>​ 分类：无形参列表、有形参列表</p><p>​ &gt; 无形参列表：不能省略一对()。比如：Math.random()</p><p>​ &gt; 有形参列表：根据方法调用时，需要的不确定的变量的类型和个数，确定形参的类型和个数。</p><p>​ 比如：Arrays类中的binarySearch()方法、sort()方法、equals()方法</p><p>​ 【经验】我们在声明方法时，是否需要形参列表呢？</p><p>​ &gt; 根据方法具体实现的功能来决定。换句话说，具体问题具体分析</p><p>​ &gt; 根据题目要求</p><p>5.5 方法体：当我们调用一个方法时，真正执行的代码。体现了此方法的功能。</p></li><li><p>注意点</p><ul><li>java里的方法“不能独立存在”，所有的方法必须定义在类里。</li><li>Java中的方法不调用，不执行。没调用一次，就执行一次。</li><li>方法内可以调用本类中的（其他）方法或属性</li><li>方法内不能定义方法。</li></ul></li><li><p>关键字：return</p><p>7.1 return的作用</p><pre><code> - 作用1：结束一个方法
 - 作用2：结束一个方法的同时，可以返回数据给方法的调用者（方法声明中如果有返回值类型，则防范内需要搭配return使用）
</code></pre><p>7.2 使用注意点：</p><ul><li>return后面不能声明执行语句</li></ul></li><li><p>方法调用的内存解析：</p><ul><li>形参：</li><li>实参：</li></ul></li></ol><p>​ 过程概述：</p><h2 id="对象数组" tabindex="-1">对象数组 <a class="header-anchor" href="#对象数组" aria-label="Permalink to &quot;对象数组&quot;">​</a></h2><ol><li>什么是对象数组？如何理解？</li></ol><blockquote><p>数组的元素可以是基本数据类型，也可以是引用数据类型。当元素是引用类型中的类时，我们称为对象数组。</p></blockquote><ol start="2"><li>举例：</li></ol><blockquote><p>String[]、Person[]、Student[]、Customer[]等</p></blockquote><ol start="3"><li>案例：</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">1. 定义类Student,包含三个属性：学号number(int)，年级state(int)，成绩score(int)。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">2. 创建20个学生对象，学号为1到20，年级和成绩都有随机数确定。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">问题一：打印出三年级（state值为3）的学生信息。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">提示：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">①：生成随机数：Math.random()，返回值类型double</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">②：四舍五入取整：Math.round(double d)，返回值类型long</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">年级【1,6】：（int）（Math.random() * 6 + 1）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">分数[0,100]：（int）（Math.random() * 101）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><ol start="4"><li>内存解析</li></ol><h2 id="方法的重载-overload" tabindex="-1">方法的重载（overload） <a class="header-anchor" href="#方法的重载-overload" aria-label="Permalink to &quot;方法的重载（overload）&quot;">​</a></h2><ol><li><p>定义：在同一个类中，允许存在一个以上的同名方法，只要他们的参数列表不同即可。</p><p>​ 满足这样特征的多个方法，彼此之间构成方法的重载。</p></li><li><p>总结为：“两同一不同”</p></li></ol><p>​ 两同：同一个类、相同的方法名</p><p>​ 一不同：参数列表不同。①参数个数不同 ②参数类型不同</p><p>​ 注意：方法的重载与形参的名、权限修饰符、返回值类型都没有关系。</p><ol start="3"><li>举例</li></ol><blockquote><p>Array类中sort(xxx[] arr)、binarySearch(xxx[] arr, xxx)、equals(xxx[], yyy[])</p></blockquote><ol start="4"><li>如何判断两个方法是相同的呢？（换句话说，编辑器是如何确定调用的某个具体方法呢？）</li></ol><p>方法相同，且参数列表相同。（形参列表相同指的是参数个数和类型都相同，与形参名没关系）</p><p>要求：在一个类中，允许存在多个相同名字的方法，只要他们的参数列表不同即可。</p><p>编辑器是如何确定调用的某个具体的方法呢？先通过方法名确定了一波重载的方法，进而通过不同的参数形参，确定具体的某一个方法。</p><ol start="5"><li>在同一个类中不允许定义两个相同的方法。</li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="可变个数形参的方法-jdk5-0" tabindex="-1">可变个数形参的方法（jdk5.0） <a class="header-anchor" href="#可变个数形参的方法-jdk5-0" aria-label="Permalink to &quot;可变个数形参的方法（jdk5.0）&quot;">​</a></h2><ol><li>使用场景</li></ol><p>在调用方法时，可能会出现方法形参的类型是正确的，但是参数的个数不确定。此时，我们就可以使用可变个数形参的方法</p><ol start="2"><li>格式：（参数类型 ... 参数名）</li><li>说明：</li></ol><p>① 可变个数形参的方法在调用时，针对于可变的形参赋的实参的个数可以为：0个、1个或多个</p><p>② 可变个数形参的方法与同一类中，同名的多方法之间可以构成重载</p><p>③ 特例：可变个数形参的方法与同一个类中方法名相同，且与可变个数形参的类型相同的数组参数不构成重载。</p><p>④ 可变个数的形参必须声明在形参列表的最后</p><p>⑤ 可变个数的形参最多在一个方法的形参列表中出现一次</p><h2 id="方法的值传递机制" tabindex="-1">方法的值传递机制 <a class="header-anchor" href="#方法的值传递机制" aria-label="Permalink to &quot;方法的值传递机制&quot;">​</a></h2><ol><li><p>（复习）对于方法内声明的局部变量来说：如果出现赋值操作</p><ul><li>如果是基本数据类型的变量，则将此变量保存的数据值传递出去。</li><li>如果是引用数据类型的变量，则将此变量保存的地址值传递出去。</li></ul></li><li><p>方法的参数的传递机制：值传递机制</p></li></ol><p>​ 2.1 概念（复习）</p><p>​ 形参：在定义方法时，方法名后面括号()中声明的变量称为形式参数，简称形参。</p><p>​ 实参：调用方法时，方法名后面括号()中的使用的值/变量/表达式称为实际参数，简称实参。</p><p>​ 2.2 规则：实参给形参赋值的过程</p><p>​ &gt; 如果形参是基本数据类型的变量，则将实参保存的数据值赋给形参。</p><p>​ &gt; 如果形参是引用数据类型的变量，则将实参保存的地址值赋给形参。</p><ol start="3"><li>面试题：Java中的参数传递机制是什么？ 值传递。 （不是引用传递）</li></ol><h2 id="递归方法" tabindex="-1">递归方法 <a class="header-anchor" href="#递归方法" aria-label="Permalink to &quot;递归方法&quot;">​</a></h2><ol><li>何为递归方法？方法自己调用自己的现象就称为递归。</li><li>递归方法分类：直接递归、简介递归</li><li>使用说明：</li></ol><ul><li>递归方法包含了一种“隐式的循环”.</li><li>递归方法会“重复执行”某段代码，但这种重复执行无须循环控制</li><li>递归一定要向“已知方向”递归，否则这种递归就变成了无穷递归，停不下来，类似于 “死循环”。最终发生 “栈内存溢出”。</li></ul><p>注意：</p><ol><li><p>递归调用会占用大量的系统堆栈，内存耗用多，在递归调用层次多时速度要比循环“慢的多”。</p><p>所以在使用递归时要慎用。</p></li><li><p>在要求高性能的情况下尽量避免使用递归，递归调用既花时间又 “耗内存”。考虑使用循环迭代</p></li></ol><h2 id="package-包-关键字的使用" tabindex="-1">package（包）关键字的使用 <a class="header-anchor" href="#package-包-关键字的使用" aria-label="Permalink to &quot;package（包）关键字的使用&quot;">​</a></h2><p>package，称为包。用于指明该文件中定义的类、借口等结构所在的包。</p><h3 id="语法格式" tabindex="-1">语法格式 <a class="header-anchor" href="#语法格式" aria-label="Permalink to &quot;语法格式&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">顶层包名</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">子包名；</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 举例： pack1\\pagk2\\PackageTest.java</span></span>
<span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">pack1</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">pack2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 指定类PackageTest属于包pack1.pack2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PackageTest</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">display</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">in method display()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ol><li>一个源文件只能有一个声明包的package语句</li><li>package语句作为java源文件的第一条语句出现。若省略该语句，则指定为无名包。</li><li>包名，属于标识符，满足标识符命名的规则和规范（全部小写）、见名知意 <ul><li>包通常使用所在工资域名的倒置；com.atguigu.xxx</li><li>大家取名时不要使用 “java.xx”包</li></ul></li><li>包对应于文件系统的目录，package语句中用“.”来指明包（目录）的层次，每一次就表示一层文件目录。</li><li>同一个包下可以声明多个结构（类、接口），但是不能定义同名的结构（类、接口）。不同的包下可以定义同名的结构</li></ol><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ol><li>包可以包含类和子包，划分“项目层次”，便于管理</li><li>帮助“管理大型软件”系统；将功能相近的类划分到同一个包中。比如：MVC的设计模式</li><li>解决“类命名冲突”的问题</li><li>控制“访问权限”</li></ol><h3 id="jdk中主要的包" tabindex="-1">JDK中主要的包 <a class="header-anchor" href="#jdk中主要的包" aria-label="Permalink to &quot;JDK中主要的包&quot;">​</a></h3><p><code>java.lang</code> ----包含一些Java语言的核心类，如String、Math、Integer、System和Thread，提供常用功能</p><p><code>java.net</code> ----包含执行与网络相关的操作的类和接口</p><p><code>java.io</code> ----包含能提供多种输入/输出功能的类</p><p><code>java.util</code> ----包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</p><p><code>java.text</code>----包含了一些Java格式化相关的类</p><p><code>java.sql</code>----包含了java进行JDBC数据库编程的相关类/接口</p><p><code>java.awt</code>----包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用</p><h2 id="import-导入" tabindex="-1">import（导入） <a class="header-anchor" href="#import-导入" aria-label="Permalink to &quot;import（导入）&quot;">​</a></h2><blockquote><p>为了使用定义在其它包中的Java类，需用import语句来显式引入指定包下所需要的类，相当于<code>import语句告诉编译器到哪里去寻找这个类</code>。</p></blockquote><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><blockquote><p>import 包名.类型;</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 举例： </span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">pack1</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">pack2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Test</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// import pack1.pack2.*;表示引入pack1.pack2包中的所有结构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PackTest</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">                                                    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Test</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Test</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// Test类在pack1.pack2包中定义</span></span>
<span class="line"><span style="color:#A6ACCD;">        t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">display</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>import语句，声明在包的声明和类的声明之间。</li><li>如果需要导入多个类或接口，那么就并列显式多个import即可</li><li>如果使用<code>a.*</code>导入结构，表示可以导入a包下的所有的结构。举例：可以使用java.util.*的方式，一次性导入util包下所有的类或接口</li><li>如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。</li><li>如果已经导入java.a包下的类，那么如果需要使用a包下的类的话，仍然需要导入。</li><li>如果在代码中使用不同包下的同名的类，那么就需要使用类的全类名的方式指明调用的是哪个类。</li><li>（了解）import static 组合的使用；调用指定类或接口下的静态的属性或方法</li></ul><h2 id="封装性" tabindex="-1">封装性 <a class="header-anchor" href="#封装性" aria-label="Permalink to &quot;封装性&quot;">​</a></h2><ol><li>为什么需要封装性？</li></ol><p>理论上：</p><pre><code>	+ \`高耦合\`：类的内部数据细节自己完成，不允许外部干涉
	+ \`低耦合\`：仅暴露少量的方法给外部使用，尽量方便外部调用
</code></pre><blockquote><p>通俗的说：把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想</p></blockquote><ol start="2"><li>如何实现数据封装？</li></ol><p>​ 2.1 权限修饰符</p><p>​ Java规定了4种权限修饰符，分别是：private、缺省、protected、public</p><p>​ 2.2 作用</p><blockquote><p>我们可以使用4种权限修饰符来修饰类及类的内部成员。当这些成员被调用时，体现可见性的大小。</p></blockquote><p>​ 2.3 实际案例：</p><p>​ 在题目中，我们给Animal的对象的legs属性赋值。在实际的尝试中，我们知道legs不能赋值为负数的。但是如果直接调用属性legs，是不能加入判断逻辑的。那怎么办？</p><h2 id="构造器-constructor" tabindex="-1">构造器（constructor） <a class="header-anchor" href="#构造器-constructor" aria-label="Permalink to &quot;构造器（constructor）&quot;">​</a></h2><ol><li>构造器的理解</li></ol><blockquote><p>constructor：n 建设者、建造者</p><p>construct：v 建设、建造、创造</p><p>construction：n 建设、建造 CCB（中国建设银行）</p></blockquote><ol start="2"><li>构造器的作用</li></ol><p>作用1：搭配new关键字，创建类的对象</p><p>作用2：在创建对象的同时，可以给对象的相关属性赋值</p><ol start="3"><li>构造器的使用说明</li></ol><ul><li>构造器声明的格式：权限修饰符 类名（形参列表）{}</li><li>创建类以后，在没有显示提供任何构造器的情况下，系统会默认提供一个空参的构造器与类声明的权限相同</li><li>一旦类中显示声明了构造器，则系统不再提供默认的空参的构造器</li><li>一个类中可以声明多个构造器，彼此之间构造重载。</li></ul><h2 id="属性赋值过程" tabindex="-1">属性赋值过程 <a class="header-anchor" href="#属性赋值过程" aria-label="Permalink to &quot;属性赋值过程&quot;">​</a></h2><h3 id="一、类中属性-当前仅考虑实例变量-赋值过程" tabindex="-1">一、类中属性（当前仅考虑实例变量）赋值过程 <a class="header-anchor" href="#一、类中属性-当前仅考虑实例变量-赋值过程" aria-label="Permalink to &quot;一、类中属性（当前仅考虑实例变量）赋值过程&quot;">​</a></h3><ol><li><p>在类中属性中，可以有哪些位置给属性赋值？</p><ul><li>① 默认初始化</li><li>② 显示初始化</li><li>③ 构造器中初始化</li><li>④ 通过“对象.方法”的方式赋值</li><li>⑤ 通过“对象.属性”的方式赋值</li></ul></li><li><p>这些位置执行的先后顺序是怎么样？</p><p>① - ② - ③ - ④ / ⑤</p></li><li><p>以上操作在对象创建过程中可以执行的次数如何？</p><blockquote><p>只能执行一次：①、②、③</p><p>可以多次执行：④、⑤</p></blockquote></li></ol><h2 id="javabean" tabindex="-1">JavaBean <a class="header-anchor" href="#javabean" aria-label="Permalink to &quot;JavaBean&quot;">​</a></h2><blockquote><p>JavaBean是一种Java语言写成的可重用组件。</p></blockquote><p><strong>好比你做了一个扳手，这个扳手会在很多地方被拿去用。这个扳手也提供多种功能（你可以拿这个扳手扳、锤、撬等等），而这个扳手就是一个组件。</strong></p><ul><li>所谓JavaBean，是指符合如下标准的Java类</li></ul><ol><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ol><h2 id="uml类图" tabindex="-1">UML类图 <a class="header-anchor" href="#uml类图" aria-label="Permalink to &quot;UML类图&quot;">​</a></h2><h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><blockquote><p>当前对象（在方法中调用时）或当前正在创建的对象（在构造器中调用时）</p></blockquote><ol><li>2222</li><li>this可以调用的结构：成员变量、方法、构造器</li><li>this调用属性和方法</li></ol><ul><li></li></ul><h2 id="继承性" tabindex="-1">继承性 <a class="header-anchor" href="#继承性" aria-label="Permalink to &quot;继承性&quot;">​</a></h2><ol><li>继承性的理解</li></ol><blockquote><p>生活上：财产的继承、颜值的继承</p><p>代码层面：</p><ul><li>自上而下：定义</li></ul></blockquote><h2 id="工具类" tabindex="-1">工具类 <a class="header-anchor" href="#工具类" aria-label="Permalink to &quot;工具类&quot;">​</a></h2><blockquote><p>帮助我们做一些事情，但是不描述任何事物的类</p></blockquote><ul><li>javabean类 ：用来描述一类事物的类。比如，Student，Teacher，Dog，Cat等</li><li>测试类：用来检查其他类是否书写正确，带有main方法的类，是程序的入口</li><li>工具类：不是用来描述一类事物的，而是帮我们做一些事情的类</li></ul><h2 id="static" tabindex="-1">static <a class="header-anchor" href="#static" aria-label="Permalink to &quot;static&quot;">​</a></h2><p><img src="`+p+'" alt=""></p><p><img src="'+o+'" alt=""></p><h2 id="重新认识main方法" tabindex="-1">重新认识main方法 <a class="header-anchor" href="#重新认识main方法" aria-label="Permalink to &quot;重新认识main方法&quot;">​</a></h2><p><img src="'+e+`" alt=""></p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><ol><li>什么是继承、继承的好处？</li></ol><p>​ 继承是面向对象三大特征之一，可以让类跟类之间产生子父的关系。</p><p>​ 可以把多个子类中的重复的代码抽取到父类中，子类可以直接使用，减少代码冗余，提高代码的复用性</p><ol start="2"><li>继承的格式？</li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">子类</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> 父类 </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><ol start="3"><li><p>继承后子类的特点？</p><p>子类可以得到父类的属性和行为，子类可以使用。</p><p>子类可以在父类的基础上新增其他功能，子类更强大。</p></li></ol><p>总结：</p><ul><li>Java只能单继承，不能多继承、但是可以多层继承。</li><li>Java中所有的类都直接或者间接继承于Object类。</li><li>子类只能访问父类中非私有的成员</li></ul><h3 id="继承中-成员变量的访问特点" tabindex="-1">继承中：成员变量的访问特点 <a class="header-anchor" href="#继承中-成员变量的访问特点" aria-label="Permalink to &quot;继承中：成员变量的访问特点&quot;">​</a></h3><p><code>就近原则</code></p><ul><li>先在局部位置找，本类成员位置找，父类成员位置，逐级往上。</li></ul><ol><li><p>如果出现了重名的成员变量怎么办？</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// 从局部位置开始往上找</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 从本类位置开始往上找</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 从父类成员位置开始往上找</span></span></code></pre></div></li></ol><h3 id="继承中-构造方法的访问特点" tabindex="-1">继承中：构造方法的访问特点 <a class="header-anchor" href="#继承中-构造方法的访问特点" aria-label="Permalink to &quot;继承中：构造方法的访问特点&quot;">​</a></h3><ul><li>子类不能继承父类的构造方法，但是可以通过super调用</li><li>子类构造方法的第一行，有一个默认的super()</li><li>默认先访问父类中无参的构造方法，再执行自己。</li><li>如果想要方法文父类有参构造，必须手动书写</li></ul>`,141),r=[c];function i(y,D,C,A,F,u){return a(),l("div",null,r)}const m=s(t,[["render",i]]);export{h as __pageData,m as default};
