import{_ as s,c as a,o as n,V as l}from"./chunks/framework.6038b03e.js";const d=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{"title":"JavaScript"},"headers":[],"relativePath":"interview/javascript.md","lastUpdated":1681747929000}'),o={name:"interview/javascript.md"},p=l(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="js的设计模式" tabindex="-1">js的设计模式？ <a class="header-anchor" href="#js的设计模式" aria-label="Permalink to &quot;js的设计模式？&quot;">​</a></h2><h2 id="var-let-const-区别" tabindex="-1">var let const 区别 <a class="header-anchor" href="#var-let-const-区别" aria-label="Permalink to &quot;var let const 区别&quot;">​</a></h2><h2 id="什么是闭包" tabindex="-1">什么是闭包？ <a class="header-anchor" href="#什么是闭包" aria-label="Permalink to &quot;什么是闭包？&quot;">​</a></h2><p>视频链接：<a href="https://www.bilibili.com/video/BV1mG411h7aD/?p=106&amp;spm_id_from=pageDriver&amp;vd_source=745d1e6dc172f4afa9af1af10c052b04" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1mG411h7aD/?p=106&amp;spm_id_from=pageDriver&amp;vd_source=745d1e6dc172f4afa9af1af10c052b04</a></p><blockquote><p>闭包就是能访问到外部函数作用域中变量的函数</p><ol><li><p>什么时候使用？</p><p>当我们需要隐藏一些不希望被别人访问的内容时就可以使用闭包了</p></li><li><p>构成闭包的要件？</p><ul><li>函数的嵌套</li><li>内部函数要引用外部函数中的变量</li><li>内部函数要作为返回值返回</li></ul></li></ol></blockquote><blockquote><p>函数在作用域，在函数创建时就已经确定了（词法作用域）</p><pre><code>  和调用的位置无关
</code></pre><p>闭包原理：闭包利用的就是词法作用域</p></blockquote><blockquote><p>闭包的生命周期：</p><ol><li>闭包在外部函数调用时产生，外部函数每次调用都会产生一个全新的闭包</li><li>在内部函数丢失时销毁（内部函数被垃圾回收了，闭包才会消失）</li></ol><p>注意事项：</p><ul><li><p>闭包只要用来隐藏一些不希望被外部访问的内容</p><pre><code>	这就意味着闭包需要占用一定的内存空间
</code></pre></li><li><p>相交于类来说，闭包比较浪费内存空间（类可以使用原型而闭包不能）</p><pre><code>	需要执行次数较少时，使用闭包
  	  	
	需要大量创建实例时，使用类（类就是this比较麻烦）
</code></pre></li></ul></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 需求：创建一个函数每次调用时，打印第几次调用了，第一次调用打印1，第二次调用打印2，以此类推...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 位于函数作用域</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">这是第 </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 次调用 fn() 函数</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#82AAFF;">count</span><span style="color:#A6ACCD;">()	</span><span style="color:#676E95;font-style:italic;">// 这是第 1 次调用 fn() 函数</span></span>
<span class="line"><span style="color:#82AAFF;">count</span><span style="color:#A6ACCD;">()	</span><span style="color:#676E95;font-style:italic;">// 这是第 2 次调用 fn() 函数</span></span>
<span class="line"><span style="color:#82AAFF;">count</span><span style="color:#A6ACCD;">()	</span><span style="color:#676E95;font-style:italic;">// 这是第 3 次调用 fn() 函数</span></span></code></pre></div><h2 id="什么是防抖" tabindex="-1">什么是防抖？ <a class="header-anchor" href="#什么是防抖" aria-label="Permalink to &quot;什么是防抖？&quot;">​</a></h2><blockquote><pre><code>  pink老师讲的防抖与节流：https://www.bilibili.com/video/BV1dv4y117mY/?spm_id_from=333.337.search-card.all.click&amp;vd_source=745d1e6dc172f4afa9af1af10c052b04
</code></pre></blockquote><blockquote><p>用户触发事件过于频繁，只要最后一次事件的操作</p><p>通过setTimeout的方式，在一定的时间间隔内，将多次触发变成一次触发</p><p>记忆方法：从头开始</p></blockquote><blockquote><pre><code>  使用场景：
</code></pre><ol><li>输入框搜索输入</li><li>文本编辑器实时保存</li></ol></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounce</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">delay</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">fun</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">delay</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="什么是节流" tabindex="-1">什么是节流？ <a class="header-anchor" href="#什么是节流" aria-label="Permalink to &quot;什么是节流？&quot;">​</a></h2><blockquote><p>控制高频事件执行次数(多少秒之内只执行一次)</p><p>记忆方法：不要打断我</p></blockquote><blockquote><pre><code>  应用场景：
</code></pre><ol><li>高频事件 例如：快速点击、鼠标滑动、resize事件、scroll事件</li><li>下拉加载</li><li>视频播放记录时间等</li></ol></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">throttle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">delay</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">delay</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="怎么查找两个数组的交集" tabindex="-1">怎么查找两个数组的交集 <a class="header-anchor" href="#怎么查找两个数组的交集" aria-label="Permalink to &quot;怎么查找两个数组的交集&quot;">​</a></h2><h2 id="遍历数组的方法-哪个可以跳出循环-哪个效率最高" tabindex="-1">遍历数组的方法，哪个可以跳出循环，哪个效率最高 <a class="header-anchor" href="#遍历数组的方法-哪个可以跳出循环-哪个效率最高" aria-label="Permalink to &quot;遍历数组的方法，哪个可以跳出循环，哪个效率最高&quot;">​</a></h2><h2 id="图标跟随鼠标移动怎么实现" tabindex="-1">图标跟随鼠标移动怎么实现 <a class="header-anchor" href="#图标跟随鼠标移动怎么实现" aria-label="Permalink to &quot;图标跟随鼠标移动怎么实现&quot;">​</a></h2><h2 id="说一下-this" tabindex="-1">说一下 this <a class="header-anchor" href="#说一下-this" aria-label="Permalink to &quot;说一下 this&quot;">​</a></h2><h2 id="怎么阻止默认事件" tabindex="-1">怎么阻止默认事件 <a class="header-anchor" href="#怎么阻止默认事件" aria-label="Permalink to &quot;怎么阻止默认事件&quot;">​</a></h2><h2 id="怎么阻止事件冒泡" tabindex="-1">怎么阻止事件冒泡 <a class="header-anchor" href="#怎么阻止事件冒泡" aria-label="Permalink to &quot;怎么阻止事件冒泡&quot;">​</a></h2><h2 id="数组常用方法" tabindex="-1">数组常用方法 <a class="header-anchor" href="#数组常用方法" aria-label="Permalink to &quot;数组常用方法&quot;">​</a></h2><h2 id="数组去重知道哪些方法" tabindex="-1">数组去重知道哪些方法 <a class="header-anchor" href="#数组去重知道哪些方法" aria-label="Permalink to &quot;数组去重知道哪些方法&quot;">​</a></h2><h2 id="字符串操作方法" tabindex="-1">字符串操作方法 <a class="header-anchor" href="#字符串操作方法" aria-label="Permalink to &quot;字符串操作方法&quot;">​</a></h2><h2 id="怎么判断一个数是不是素数-逻辑怎么写" tabindex="-1">怎么判断一个数是不是素数，逻辑怎么写？ <a class="header-anchor" href="#怎么判断一个数是不是素数-逻辑怎么写" aria-label="Permalink to &quot;怎么判断一个数是不是素数，逻辑怎么写？&quot;">​</a></h2><blockquote><p>什么是素数：<a href="https://www.108hei.com/archives/5196" target="_blank" rel="noreferrer">https://www.108hei.com/archives/5196</a></p></blockquote><h2 id="const定义对象里面的属性值能不能修改-为什么" tabindex="-1">const定义对象里面的属性值能不能修改？为什么？ <a class="header-anchor" href="#const定义对象里面的属性值能不能修改-为什么" aria-label="Permalink to &quot;const定义对象里面的属性值能不能修改？为什么？&quot;">​</a></h2><h2 id="对同步和异步的理解" tabindex="-1">对同步和异步的理解 <a class="header-anchor" href="#对同步和异步的理解" aria-label="Permalink to &quot;对同步和异步的理解&quot;">​</a></h2><h2 id="常见的宏任务-微任务" tabindex="-1">常见的宏任务，微任务？ <a class="header-anchor" href="#常见的宏任务-微任务" aria-label="Permalink to &quot;常见的宏任务，微任务？&quot;">​</a></h2><h2 id="怎么判断两个数组相等" tabindex="-1">怎么判断两个数组相等？ <a class="header-anchor" href="#怎么判断两个数组相等" aria-label="Permalink to &quot;怎么判断两个数组相等？&quot;">​</a></h2><h2 id="es6遍历数组的方法" tabindex="-1">es6遍历数组的方法？ <a class="header-anchor" href="#es6遍历数组的方法" aria-label="Permalink to &quot;es6遍历数组的方法？&quot;">​</a></h2><h1 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h1><h2 id="promise捕获错误的方式" tabindex="-1">promise捕获错误的方式 <a class="header-anchor" href="#promise捕获错误的方式" aria-label="Permalink to &quot;promise捕获错误的方式&quot;">​</a></h2><h2 id="异步任务有哪些" tabindex="-1">异步任务有哪些 <a class="header-anchor" href="#异步任务有哪些" aria-label="Permalink to &quot;异步任务有哪些&quot;">​</a></h2><h2 id="两个异步请求数据操作怎么合并" tabindex="-1">两个异步请求数据操作怎么合并 <a class="header-anchor" href="#两个异步请求数据操作怎么合并" aria-label="Permalink to &quot;两个异步请求数据操作怎么合并&quot;">​</a></h2><h2 id="promise有几种状态-会不会改变" tabindex="-1">promise有几种状态，会不会改变 <a class="header-anchor" href="#promise有几种状态-会不会改变" aria-label="Permalink to &quot;promise有几种状态，会不会改变&quot;">​</a></h2><h2 id="async-和-await解决了什么问题" tabindex="-1">async 和 await解决了什么问题？ <a class="header-anchor" href="#async-和-await解决了什么问题" aria-label="Permalink to &quot;async 和 await解决了什么问题？&quot;">​</a></h2>`,40),e=[p];function t(r,c,i,y,F,D){return n(),a("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
